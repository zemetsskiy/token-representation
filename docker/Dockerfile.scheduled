FROM python:3.11-slim

WORKDIR /app

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies including cron
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    cron \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create logs directory
RUN mkdir -p /app/logs

# Create appuser and set permissions
RUN useradd -m -u 1000 appuser && \
    chown -R appuser:appuser /app

# Setup cron
COPY docker/crontab /etc/cron.d/token-worker-cron

# Set proper permissions for cron file
RUN chmod 0644 /etc/cron.d/token-worker-cron && \
    chown root:root /etc/cron.d/token-worker-cron && \
    crontab -u appuser /etc/cron.d/token-worker-cron

# Create cron log file
RUN touch /var/log/cron.log && \
    chown appuser:appuser /var/log/cron.log

ENV PYTHONPATH=/app:/app/src

# Create entrypoint script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Source environment variables\n\
if [ -f /app/.env ]; then\n\
    export $(cat /app/.env | grep -v "^#" | xargs)\n\
fi\n\
\n\
echo "Starting cron daemon..."\n\
cron\n\
\n\
echo "Cron daemon started. Tailing logs..."\n\
tail -f /var/log/cron.log /app/logs/*.log 2>/dev/null || tail -f /var/log/cron.log\n\
' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh

USER root

CMD ["/app/entrypoint.sh"]
